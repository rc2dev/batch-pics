#!/usr/bin/env bash
#
# Run batch operations on selected pictures.
# Dependencies: imagemagick, zenity
#
# Copyright (C) 2018-2020 Rafael Cavalcanti - rafaelc.org
# Licensed under GPLv3

set -euo pipefail
set -x

readonly script_name="$(basename "$0")"
readonly script_dir="$(dirname "$(readlink -f "$0")")"
readonly logo_romildo_path="$script_dir/../share/logo_romildo.png"
readonly logo_jrn_path="$script_dir/../share/logo_jrn.png"

declare -a pics
declare ratio
declare rotation
declare add_logo_romildo
declare add_logo_jrn


main() {
	check_deps
	filter_args "$@"
	check_args

	get_options
	operate
}

usage() {
	cat <<-END
	Please provide at least one picture.
	Usage: $script_name pic_path ...
	END

	zenity --error --text "Por favor escolha uma foto ou mais."

	exit 1
}

check_args() {
	if [[ "${#pics[@]}" -lt 1 ]]; then
		usage
	fi
}

check_deps() {
	if [[ ! -f "$logo_romildo_path" ]]; then
		zenity --error --text "Logo Romildo não encontrado."
		exit 1
	elif [[ ! -f "$logo_jrn_path" ]]; then
		zenity --error --text "Logo JRN não encontrado."
		exit 1
	fi
}

filter_args() {
	for arg in "$@"; do
		if is_image "$arg"; then
			pics+=("$arg")
		else
			printf "Skipping non-image... %s\n" "$arg"
		fi
	done
}

get_options() {
	local -r options="$(zenity --title "Operar imagens" --forms \
		--add-combo "Novo tamanho" --combo-values "30%|50%|70%|200%|400%" \
		--add-combo "Girar" --combo-values "90º|180º|270º" \
		--add-combo "Logo Romildo" --combo-values "Com logo Romildo" \
		--add-combo "Logo JRN" --combo-values "Com logo JRN")"

	IFS="|" read -r ratio rotation add_logo_romildo add_logo_jrn <<< "$options"

	# Always be an empty string if no option provided.
	ratio=${ratio/# /}
	rotation=${rotation/# /}
	add_logo_romildo=${add_logo_romildo/# /}
	add_logo_jrn=${add_logo_jrn/# /}
}

get_dir_out() {
	local -r dir_input="$(dirname "${pics[0]}")"

	local name="${ratio:+$ratio - }${rotation:+$rotation - }${add_logo_romildo:+$add_logo_romildo - }${add_logo_jrn:+$add_logo_jrn - }"
	name="${name/% - /}"

	printf "%s/%s" "$dir_input" "$name"
}

operate() {
	local -r dir_out="$(get_dir_out)"
	local pic_out

	if [[ -z "$ratio" && -z "$rotation" && -z "$add_logo_romildo" && -z "$add_logo_jrn" ]]; then
		return 0
	fi

	mkdir -p "$dir_out"

	for pic in "${pics[@]}"; do
		cp "$pic" "$dir_out"
		pic_out="$dir_out/$(basename "$pic")"

		if [[ -n "$ratio" ]]; then
			convert -resize "$ratio" "$pic_out" "$pic_out"
		fi

		if [[ -n "$rotation" ]]; then
			convert -rotate "${rotation/º/}" "$pic_out" "$pic_out"
		fi

		if [[ -n "$add_logo_romildo" ]]; then
			blend_logo_romildo "$pic_out" "$pic_out"
		fi

		if [[ -n "$add_logo_jrn" ]]; then
			blend_logo_jrn "$pic_out" "$pic_out"
		fi
	done
}

is_image() {
	local -r path="$1"

	local -r mimetype="$(file --brief --mime-type "$path")"
	[[ "$mimetype" =~ ^image* ]]
}

blend_logo_romildo() {
	local -r input="$1"
	local -r output="$2"

	convert "$input" "$logo_romildo_path" \
		+distort affine "0,0 0,0 %[w],%[h] %[fx:t?v.w*(u.h/v.h*0.1):s.w],%[fx:t?v.h*(u.h/v.h*0.1):s.h]" \
		-shave 1 -gravity Center -geometry +20+20 -composite \
		"$output"
}

blend_logo_jrn() {
	local -r input="$1"
	local -r output="$2"

	convert "$input" "$logo_jrn_path" \
		+distort affine "0,0 0,0 %[w],%[h] %[fx:t?v.w*(u.h/v.h*0.1):s.w],%[fx:t?v.h*(u.h/v.h*0.1):s.h]" \
		-shave 1 -gravity Northwest -geometry +20+20 -composite \
		"$output"
}

main "$@"
